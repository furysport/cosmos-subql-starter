syntax = "proto3";

package cosmwasm.wasm.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmwasm/wasm/v1/types.proto";
import "google/protobuf/any.proto";

// Represents a pool's details.
message Pool {
  string id = 1;
  repeated Asset assets = 2;
  string total_share = 3;
  double usdVolume24h = 4;
  double usdVolume7d = 5;
  double tvl = 6;
  double totalLiquidity = 7;
  double apr7d = 8;
  string ratio = 9;
}

// Represents an asset within a pool.
message Asset {
  Info info = 1;
  string amount = 2;
}

// Asset information, supporting different asset types.
message Info {
  oneof asset_type {
    NativeToken native_token = 1;
    Token contract_addr = 2;
  }
}

// Represents a native token.
message NativeToken {
  string denom = 1;
}

// Represents a CW20 token via contract address.
message Token {
  string contract_addr = 1;
}

// Represents a flow's details.
message Flow {
  int32 flow_id = 1;
  string flow_label = 2;
  string flow_creator = 3;
  Asset flow_asset = 4;
  string claimed_amount = 5;
  string curve = 6;
  int32 start_epoch = 7;
  int32 end_epoch = 8;
  map<int32, string> emitted_tokens = 9;
}

// Service definition for blockchain interactions.
service BlockchainService {
  rpc GetPool (PoolRequest) returns (Pool) {}
  rpc GetFlows (FlowRequest) returns (FlowResponse) {}
  rpc GetHealthyRPCs (ChainNameRequest) returns (RPCResponse) {}
  rpc GetHealthyRestEndpoints (ChainNameRequest) returns (RestResponse) {}
  rpc GetPrices (PriceRequest) returns (PriceResponse) {}
}

// Request and response messages for service methods.
message PoolRequest {
  string chainNameId = 1;
  string address = 2;
}

message FlowRequest {
  string chainNameId = 1;
  string address = 2;
}

message ChainNameRequest {
  string chainNameId = 1;
}

message RPCResponse {
  repeated string rpcs = 1;
}

message RestResponse {
  repeated string rests = 1;
}

message PriceRequest {
  repeated string ids = 1;
}

message PriceResponse {
  map<string, cosmos.base.v1beta1.Coin> prices = 1; // Using Coin from Cosmos SDK for price representation.
}

message FlowResponse {
  repeated Flow flows = 1;
}
