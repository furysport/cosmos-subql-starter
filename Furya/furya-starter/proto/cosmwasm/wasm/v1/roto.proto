syntax = "proto3";

package cosmwasm.wasm.v1;

import "gogoproto/gogo.proto";
import "cosmwasm/wasm/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/CosmWasm/wasmd/x/wasm/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;

service RotoQuerier {
  // Queries the pool data
  rpc GetPool(GetPoolRequest) returns (GetPoolResponse) {
    option (google.api.http) = {
      get: "/cosmwasm/wasm/v1/query/{chain_name_id}/pool/{address}"
    };
  }

  // Queries the flows data
  rpc GetFlows(GetFlowsRequest) returns (GetFlowsResponse) {
    option (google.api.http) = {
      get: "/cosmwasm/wasm/v1/query/{chain_name_id}/flows/{address}"
    };
  }

  // Queries healthy RPC endpoints
  rpc GetHealthyRPCs(GetHealthyRPCsRequest) returns (GetHealthyRPCsResponse) {
    option (google.api.http) = {
      get: "/cosmwasm/wasm/v1/api/rpcs/{chain_name_id}"
    };
  }

  // Queries a random healthy RPC endpoint
  rpc GetRandomRPC(GetRandomRPCRequest) returns (GetRandomRPCResponse) {
    option (google.api.http) = {
      get: "/cosmwasm/wasm/v1/api/randomrpc/{chain_name_id}"
    };
  }

  // Queries healthy REST endpoints
  rpc GetHealthyRestEndpoints(GetHealthyRestEndpointsRequest) returns (GetHealthyRestEndpointsResponse) {
    option (google.api.http) = {
      get: "/cosmwasm/wasm/v1/api/rests/{chain_name_id}"
    };
  }

  // Queries prices
  rpc GetPrices(GetPricesRequest) returns (GetPricesResponse) {
    option (google.api.http) = {
      get: "/cosmwasm/wasm/v1/api/prices"
    };
  }

  // Queries gas prices
  rpc GetGasPrices(GetGasPricesRequest) returns (GetGasPricesResponse) {
    option (google.api.http) = {
      get: "/cosmwasm/wasm/v1/api/gasprices"
    };
  }
}

message GetPoolRequest {
  string chain_name_id = 1 [(google.api.field_behavior) = REQUIRED];
  string address = 2 [(google.api.field_behavior) = REQUIRED];
}

message GetPoolResponse {
  PoolData data = 1;
}

message PoolData {
  repeated PoolAsset assets = 1;
  string total_share = 2;
}

message PoolAsset {
  AssetInfo info = 1;
  string amount = 2;
}

message AssetInfo {
  NativeToken native_token = 1;
}

message NativeToken {
  string denom = 1;
}

message GetFlowsRequest {
  string chain_name_id = 1 [(google.api.field_behavior) = REQUIRED];
  string address = 2 [(google.api.field_behavior) = REQUIRED];
}

message GetFlowsResponse {
  repeated FlowData data = 1;
}

message FlowData {
  int32 flow_id = 1;
  string flow_creator = 2;
  FlowAsset flow_asset = 3;
  string claimed_amount = 4;
  string curve = 5;
  int32 start_epoch = 6;
  int32 end_epoch = 7;
  map<int32, string> emitted_tokens = 8;
  map<string, string> asset_history = 9;
}

message FlowAsset {
  AssetInfo info = 1;
  string amount = 2;
}

message GetHealthyRPCsRequest {
  string chain_name_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetHealthyRPCsResponse {
  repeated string rpc_endpoints = 1;
}

message GetRandomRPCRequest {
  string chain_name_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetRandomRPCResponse {
  string rpc_endpoint = 1;
}

message GetHealthyRestEndpointsRequest {
  string chain_name_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetHealthyRestEndpointsResponse {
  repeated string rest_endpoints = 1;
}

message GetPricesRequest {
  repeated string ids = 1;
}

message GetPricesResponse {
  map<string, PriceData> data = 1;
}

message PriceData {
  double usd = 1;
}

message GetGasPricesRequest {}

message GetGasPricesResponse {
  map<string, GasPrice> data = 1;
}

message GasPrice {
  string denom = 1;
  double amount = 2;
}
